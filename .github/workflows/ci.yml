name: CI & Release

on:
  push:
    branches: [ master ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NUGET_PACK_DIR: ${{ github.workspace }}/nupkg
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore Veggerby.Units.sln
      - name: Build
        run: dotnet build Veggerby.Units.sln --configuration Release --no-restore
      - name: Test (with coverage)
        run: |
          dotnet test Veggerby.Units.sln \
            --configuration Release \
            --no-build \
            --results-directory ./TestResults \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults
      - name: Upload coverage to Codecov
        if: ${{ always() && env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v5
        with:
          files: TestResults/**/coverage.cobertura.xml
          flags: unittests
          name: veggerby-units-codecov
          fail_ci_if_error: false
          token: ${{ env.CODECOV_TOKEN }}

  pack:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'
      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
      - name: Restore
        run: dotnet restore Veggerby.Units.sln
      - name: Build
        run: dotnet build Veggerby.Units.sln --configuration Release --no-restore
      - name: Fetch GitHub Release Notes
        id: get_release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v7
        with:
          script: |
            const tag = process.env.GITHUB_REF.split('/').pop();
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              core.setOutput('body', release.body || '');
            } catch (e) {
              core.setOutput('body', '');
            }
      - name: Write release notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${RELEASE_NOTES:-No release notes provided.}" > RELEASE_NOTES.txt
        env:
          RELEASE_NOTES: ${{ steps.get_release_notes.outputs.body || '' }}
      - name: Pack (Veggerby.Units)
        run: |
          VERSION_BASE="${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          VERSION_SUFFIX=""
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            VERSION_SUFFIX="-pr${{ github.event.pull_request.number }}.${{ github.run_number }}"
          elif [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            VERSION_SUFFIX="-alpha.${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          fi
          RELEASE_NOTES_ARG=""
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            RELEASE_NOTES_ARG="/p:PackageReleaseNotes=\"$(sed 's/\r//g' RELEASE_NOTES.txt)\""
          fi
          mkdir -p "$NUGET_PACK_DIR"
          dotnet pack src/Veggerby.Units/Veggerby.Units.csproj \
            --configuration Release \
            --no-build \
            --output "$NUGET_PACK_DIR" \
            /p:Version="${VERSION_BASE}${VERSION_SUFFIX}" $RELEASE_NOTES_ARG
      - name: Upload NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.NUGET_PACK_DIR }}

  publish-gh-prerelease:
    needs: pack
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Download Package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg
      - name: Publish prerelease to GitHub Packages (PR)
        run: dotnet nuget push ./nupkg/*.nupkg --api-key "$GH_PACKAGES_TOKEN" --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate
        env:
          GH_PACKAGES_TOKEN: ${{ env.GH_PACKAGES_TOKEN }}

  publish-master-prerelease:
    needs: pack
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Download Package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg
      - name: Publish prerelease to GitHub Packages (main)
        run: dotnet nuget push ./nupkg/*.nupkg --api-key "$GH_PACKAGES_TOKEN" --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate
        env:
          GH_PACKAGES_TOKEN: ${{ env.GH_PACKAGES_TOKEN }}
      - name: Publish prerelease to NuGet.org (master)
        run: dotnet nuget push ./nupkg/*.nupkg --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
        env:
          NUGET_API_KEY: ${{ env.NUGET_API_KEY }}

  publish-tag-release:
    needs: pack
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Download Package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg
      - name: Publish release to GitHub Packages (tag)
        run: dotnet nuget push ./nupkg/*.nupkg --api-key "$GH_PACKAGES_TOKEN" --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate
        env:
          GH_PACKAGES_TOKEN: ${{ env.GH_PACKAGES_TOKEN }}
      - name: Publish release to NuGet.org (tag)
        run: dotnet nuget push ./nupkg/*.nupkg --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
        env:
          NUGET_API_KEY: ${{ env.NUGET_API_KEY }}
